diff --git a/lava_rest_app/base/views.py b/lava_rest_app/base/views.py
index b236c0f43..a2c1b45e9 100644
--- a/lava_rest_app/base/views.py
+++ b/lava_rest_app/base/views.py
@@ -19,7 +19,6 @@
 
 import io
 
-import junit_xml
 import tap
 from django.http.response import FileResponse, HttpResponse
 from rest_framework import status, viewsets
@@ -113,7 +112,6 @@ class TestJobViewSet(viewsets.ModelViewSet):
 
     The test results are also available in JUnit and TAP13 at:
 
-    * `/jobs/<job_id>/junit/`
     * `/jobs/<job_id>/tap13/`
     """
 
@@ -154,59 +152,6 @@ class TestJobViewSet(viewsets.ModelViewSet):
             self.permission_classes = [IsSuperUser]
         return super().get_permissions()
 
-    @detail_route(methods=["get"], suffix="junit")
-    def junit(self, request, **kwargs):
-        suites = []
-        classname_prefix = request.query_params.get("classname_prefix", "")
-        if classname_prefix != "":
-            classname_prefix = str(classname_prefix) + "_"
-        for suite in self.get_object().testsuite_set.all().order_by("id"):
-            cases = []
-            for case in suite.testcase_set.all().order_by("id"):
-                # Grab the duration
-                md = case.action_metadata
-                duration = None
-                if md is not None:
-                    duration = md.get("duration")
-                    if duration is not None:
-                        duration = float(duration)
-
-                # Build the test case junit object
-                tc = junit_xml.TestCase(
-                    case.name,
-                    elapsed_sec=duration,
-                    classname="%s%s" % (classname_prefix, case.suite.name),
-                    timestamp=case.logged.isoformat(),
-                )
-                if case.result == TestCase.RESULT_FAIL:
-                    logs = None
-                    # TODO: is this of any use? (yaml inside xml!)
-                    if (
-                        case.start_log_line is not None
-                        and case.end_log_line is not None
-                    ):
-                        logs = logs_instance.read(
-                            self.get_object(), case.start_log_line, case.end_log_line
-                        )
-                    tc.add_failure_info("failed", output=logs)
-                elif case.result == TestCase.RESULT_SKIP:
-                    tc.add_skipped_info("skipped")
-                cases.append(tc)
-            suites.append(
-                junit_xml.TestSuite(
-                    suite.name,
-                    test_cases=cases,
-                    timestamp=suite.get_end_datetime().isoformat(),
-                )
-            )
-
-        data = junit_xml.to_xml_report_string(suites, encoding="utf-8")
-        response = HttpResponse(data, content_type="application/xml")
-        response["Content-Disposition"] = (
-            "attachment; filename=job_%d.xml" % self.get_object().id
-        )
-        return response
-
     @detail_route(methods=["get"], suffix="logs")
     def logs(self, request, **kwargs):
         start = safe_str2int(request.query_params.get("start", 0))
diff --git a/lava_server/compat.py b/lava_server/compat.py
index b7f3bf4c0..c07513417 100644
--- a/lava_server/compat.py
+++ b/lava_server/compat.py
@@ -18,7 +18,6 @@
 # along
 # with this program; if not, see <http://www.gnu.org/licenses>.
 
-import junit_xml
 import rest_framework_filters as filters
 from django.core.management.base import CommandParser
 from django.utils.version import get_version
@@ -53,9 +52,6 @@ except ImportError:
         return filters.RelatedFilter(cls, name=name, queryset=queryset)
 
 
-if not getattr(junit_xml, "to_xml_report_string", None):
-    junit_xml.to_xml_report_string = junit_xml.TestSuite.to_xml_string
-
 
 FilterBackend = RestFrameworkFilterBackend
 
