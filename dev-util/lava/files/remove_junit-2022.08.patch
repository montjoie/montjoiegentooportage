--- a/lava_rest_app/base/views.py.old	2022-09-13 17:21:27.361858807 +0200
+++ b/lava_rest_app/base/views.py	2022-09-13 17:21:49.065675674 +0200
@@ -18,7 +18,6 @@
 # along with LAVA.  If not, see <http://www.gnu.org/licenses/>.
 
 import io
-import junit_xml
 import tap
 
 import lava_server.compat  # pylint: disable=unused-import
@@ -155,59 +154,6 @@
             self.permission_classes = [IsSuperUser]
         return super().get_permissions()
 
-    @detail_route(methods=["get"], suffix="junit")
-    def junit(self, request, **kwargs):
-        suites = []
-        classname_prefix = request.query_params.get("classname_prefix", "")
-        if classname_prefix != "":
-            classname_prefix = str(classname_prefix) + "_"
-        for suite in self.get_object().testsuite_set.all().order_by("id"):
-            cases = []
-            for case in suite.testcase_set.all().order_by("id"):
-                # Grab the duration
-                md = case.action_metadata
-                duration = None
-                if md is not None:
-                    duration = md.get("duration")
-                    if duration is not None:
-                        duration = float(duration)
-
-                # Build the test case junit object
-                tc = junit_xml.TestCase(
-                    case.name,
-                    elapsed_sec=duration,
-                    classname="%s%s" % (classname_prefix, case.suite.name),
-                    timestamp=case.logged.isoformat(),
-                )
-                if case.result == TestCase.RESULT_FAIL:
-                    logs = None
-                    # TODO: is this of any use? (yaml inside xml!)
-                    if (
-                        case.start_log_line is not None
-                        and case.end_log_line is not None
-                    ):
-                        logs = logs_instance.read(
-                            self.get_object(), case.start_log_line, case.end_log_line
-                        )
-                    tc.add_failure_info("failed", output=logs)
-                elif case.result == TestCase.RESULT_SKIP:
-                    tc.add_skipped_info("skipped")
-                cases.append(tc)
-            suites.append(
-                junit_xml.TestSuite(
-                    suite.name,
-                    test_cases=cases,
-                    timestamp=suite.get_end_datetime().isoformat(),
-                )
-            )
-
-        data = junit_xml.to_xml_report_string(suites, encoding="utf-8")
-        response = HttpResponse(data, content_type="application/xml")
-        response["Content-Disposition"] = (
-            "attachment; filename=job_%d.xml" % self.get_object().id
-        )
-        return response
-
     @detail_route(methods=["get"], suffix="logs")
     def logs(self, request, **kwargs):
         start = safe_str2int(request.query_params.get("start", 0))
--- a/lava_server/compat.py.old	2022-03-22 12:40:07.565095046 +0100
+++ b/lava_server/compat.py	2022-03-22 12:40:26.539877963 +0100
@@ -22,7 +22,6 @@
 from django.core.management.base import CommandParser
 from rest_framework_extensions import __version__ as DRFE_VERSION_STR
 import rest_framework_filters as filters
-import junit_xml
 
 
 DJANGO_VERSION = get_version()
@@ -55,8 +54,6 @@
         return filters.RelatedFilter(cls, name=name, queryset=queryset)
 
 
-if not getattr(junit_xml, "to_xml_report_string", None):
-    junit_xml.to_xml_report_string = junit_xml.TestSuite.to_xml_string
 
 
 FilterBackend = RestFrameworkFilterBackend
